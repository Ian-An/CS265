Q1
List: A list represents a countable number of ordered values, where the same value may occur more than once.
Stack: A stack can be thoughts as linear structure by a physical stack, a structure where insertion and deletion of items takes place at one end called top of the stack.
Queue: A queues represents a data structure that follows "first in & first out" rule for inserting element and removing element.
Dictionary: A dicitonary holds a key and a correspoding value as a pair.

Q2
log2(n). A binary search will run half of the remaining elements each time, and the worst case can be represented as the equation 1 = n / 2^x. Thus the worst case x = log2(n).

Q3
The linear search will check every element in this array. Thus, the comparison time is n times.

Q4
To search an unsorted array. Binary search cannot be implemented on an unsorted array.

Q5
*84* 37 93 82 98 27 63 73 93 27 75 55 45 8
37 82 27 63 73 27 75 55 45 8 *84* 93 98 93
*37* 82 27 63 73 27 75 55 45 8	 84   *93* 98 93
27 27 8 *37* 82 63 73 75 55 45 	 84    93 *93* 98
*27* 27 8   37   *82* 63 73 75 55 45   84   93   *93* 98
8 *27*   37   63 73 75 55 45 *82*   84   93   93 98
8   27   27   37   *63* 73 75 77 45   82   84   93   93   98
8   27   27   37   45 *63* 73 75 77   82   84   93   93   98
8   27   27   37   45   63   *73* 75 77   82   84   93   93   98
8   27   27   37   45   63   73   *75* 77   82   84   93   93   98
8   27   27   37   45   63   73   75   77   82   84   93   93   98

Q6
3->24->06 

Q7
[13,[28,[13,[24,NONE]]]]

Q8
The difference in output is becuase the pointer s that has been reinitialzed and reallocated the memory. While, the buffer remiands the same. 
workflow:
buffer is initilised to "on the footsteps of dawn"
pointer s is added with "who's never ever been born" and buffer changes as well
Then, buffer is initialised to "on the footsteps of dawn", while s points to empty memory 
Finally, pointer changes without having the buffer changed


Q9
0
1
2
3      [Bob,38],[Cos,86]
4      [Vera,99],[Nash,11],[Kate,28],[Jaga,24]
5      [Jesse,78]
6

Q10
int find(char *key, int *p_ans) {
	int h;
	h = hash(key);
	entry *node;
	for( node = table[h]; node != NULL; node = node -> next)
		if( strcmp(key ,node -> key) == 0 ) {
			*p_ans = node -> val;
			return 1;
	}
	return 0;
}
